export const DEFAULT_COLONY_SAMPLE = 6;

export const ColonySamples = Object.freeze({
    Clear: Symbol('Clear'),
    Pattern: Symbol('Pattern'),
    Randomly: Symbol('Randomly'),
    Blinker: Symbol('Blinker'),
    Glider: Symbol('Glider'),
    GlidersFactory: Symbol('Gliders factory'),
    CoolPattern: Symbol('Cool pattern'),
});

export const colonySamples = [
    {
        id: ColonySamples.Clear,
        label: ColonySamples.Clear.description,
        row: 15,
        column: 15,
        cellSize: 40,
        generationsCount: 5000,
        generationsAtOnce: 1,
        throttleValue: 0,
        cells: [],
    },
    {
        id: ColonySamples.Pattern,
        label: ColonySamples.Pattern.description,
        row: 150,
        column: 150,
        cellSize: 4,
        generationsCount: 5000,
        generationsAtOnce: 1,
        throttleValue: 0,
        cells: [],
    },
    {
        id: ColonySamples.Randomly,
        label: ColonySamples.Randomly.description,
        row: 100,
        column: 100,
        cellSize: 5,
        generationsCount: 5000,
        generationsAtOnce: 1,
        throttleValue: 0,
        cells: [],
    },
    {
        id: ColonySamples.Blinker,
        label: ColonySamples.Blinker.description,
        row: 9,
        column: 9,
        cellSize: 50,
        generationsCount: 5000,
        generationsAtOnce: 1,
        throttleValue: 250,
        cells: [
            [4, 3],
            [4, 4],
            [4, 5],
        ],
    },
    {
        id: ColonySamples.Glider,
        label: ColonySamples.Glider.description,
        row: 50,
        column: 50,
        cellSize: 8,
        generationsCount: 5000,
        generationsAtOnce: 1,
        throttleValue: 100,
        cells: [
            [1, 3],
            [2, 1],
            [2, 3],
            [3, 2],
            [3, 3],
        ],
    },
    {
        id: ColonySamples.GlidersFactory,
        label: ColonySamples.GlidersFactory.description,
        row: 300,
        column: 300,
        cellSize: 2,
        generationsCount: 5000,
        generationsAtOnce: 1,
        throttleValue: 0,
        cells: [
            [25, 13],
            [25, 14],
            [26, 13],
            [26, 14],
            [25, 23],
            [26, 23],
            [27, 23],
            [28, 24],
            [29, 25],
            [29, 26],
            [24, 24],
            [23, 25],
            [23, 26],
            [24, 28],
            [25, 29],
            [26, 27],
            [26, 29],
            [26, 30],
            [27, 29],
            [28, 28],
            [25, 33],
            [25, 34],
            [26, 35],
            [24, 34],
            [24, 33],
            [23, 33],
            [23, 34],
            [22, 35],
            [22, 37],
            [21, 37],
            [26, 37],
            [27, 37],
            [24, 47],
            [23, 47],
            [23, 48],
            [24, 48],
        ],
    },
    {
        id: ColonySamples.Clear,
        label: ColonySamples.CoolPattern.description,
        row: 150,
        column: 180,
        cellSize: 4,
        generationsCount: 1148,
        generationsAtOnce: 1,
        throttleValue: 0,
        cells: [
            [120, 82],
            [120, 83],
            [120, 84],
            [120, 85],
            [120, 86],
            [120, 87],
            [119, 84],
            [119, 85],
            [118, 83],
            [118, 86],
        ],
    },
];
